########## Connecting concentrator to Raspberry Pi ##########

Connect concentrator board to raspberry pi using six-pin pin row on concentrator and 5V, GND, UART_RX and UART_TX on raspberry GPIO (google your raspberry model)

# Enable UART
sudo raspi-config
# Select advanced options, then Serial, and select <no> to login shell over serial  
ls /dev/ttyA*
# Verify that /dev/ttyAMA0 is listed

# You might want to disable console output on the UART while booting. It is however unlikely that the console output will create a valid packet, that the concentrator will accept. How to do this will vary depending on distribution and model (google is your friend)


########## Install programs you will need ##########

sudo apt update
sudo apt upgrade
sudo apt install python-dev
sudo pip install flask
sudo pip install pygal 
sudo apt install nginx php5-fpm php5-gd uwsgi uwsgi-plugin-python
sudo apt install python-dateutil
sudo apt install python-pandas

########## Part 1. Data into the database ##########

cd /home
sudo mkdir www
sudo chown pi:pi www

cd /home/www
sqlite3 low_power_radio.sqlite

# Following steps are executed while running sqlite3
sqlite> CREATE TABLE radio(address INTEGER PRIMARY KEY, location TEXT, type TEXT);

sqlite> CREATE TABLE data(timestamp DATETIME, id INTEGER, counter INTEGER, temperature REAL, humidity INTEGER, input INTEGER, output INTEGER, address INTEGER, FOREIGN KEY(address) REFERENCES radio(address));

# Replace xx with radio address marked on board
sqlite> INSERT INTO "radio" VALUES(xx,'location_x','verx_revx');
sqlite> INSERT INTO "radio" VALUES(xx,'location_x','verx_revx');

# Exit sqlite3
sqlite> .exit

# copy "low_power_radio_uart.py" to /home/www/
crontab -e
# add "@reboot python /home/www/low_power_radio_uart.py &" at the bottom

# Reboot board
sudo reboot -h now

# Now you can verify that "low_power_radio_uart.py" is running
ps -aux | grep python
# You should se something similar to: 
# "pi        7108  3.2  1.5  10424  6876 pts/1    S    07:55   1:30 python /home/www/low_power_radio_uart.py"
# "pi        7673  0.0  0.3   4240  1588 pts/1    S+   08:41   0:00 grep --color=auto python"

# A single LED blink on the concentrator indicate that a valid radio message is received from a sensor
# Two LED blinks on the concentrator indicate that the message was received and that the "low_power_radio_uart.py" script has responded

# Wait while a few radio messages are received from sensors, and verify that the database is updated by "low_power_radio_uart.py"
sqlite3 low_power_radio.sqlite
sqlite> .dump data
# Output may look like this depending on how sqlite3 is configured:
# 2016-11-17 08:41:02|48|168|27.52|14|0|0|4932
# 2016-11-17 08:49:06|48|209|24.3|18|0|0|26668
# 2016-11-17 08:50:04|48|218|24.5|17|0|0|8309
# 2016-11-17 08:55:41|48|169|27.46|14|0|0|4932
# Exit sqlite
sqlite> .exit

########## Part 2. Data out of the database ##########

# add "low_power_radio_module.py" and "templates" folder to /home/www/

# test the installation by running the module in python
python low_power_radio_module.py
# on a pc, connected to the same local network as the raspberry pi, point a browser to "<raspberry_pi_ip_address>:5000" example: "10.0.0.3:5000"

cd /tmp
touch mysite.sock
sudo chown www-data mysite.sock

cd /etc/nginx/sites-available
sudo mv default default.backup
# copy "default" to /etc/nginx/sites-available/
# Remember to update the ip address in "default". You should also consider to setup your router to assign a fixed ip address to your raspberry pi. 

cd /etc/uwsgi/apps-available/
# add "mysite.ini" to /etc/uwsgi/apps-available/
sudo ln -s /etc/uwsgi/apps-available/mysite.ini /etc/uwsgi/apps-enabled/mysite.ini

sudo service nginx restart
sudo service uwsgi restart

# test the complete setup (might take a few seconds to load the generated web page) on a pc, connected to the same local network as the raspberry pi, by pionting a browser to "http://<raspberry_pi_ip_address>:80" example "http://10.0.0.3:80"

# If you wish to view the web page generated by the raspberry pi from anywhere in the world:
# 1) You need to configure your router to forward requests to your raspberry pi. Using a different port than the standard port 80 into your router is a good idea, but have the router forward requests on port 80 on your local network.
# 2) If you use a free dns translation service like duckdns.org, you do not have to remember your external ip address 
